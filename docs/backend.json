{
  "entities": {
    "Guest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Guest",
      "type": "object",
      "description": "Represents a guest attending the graduation party.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the guest."
        },
        "name": {
          "type": "string",
          "description": "The name of the guest."
        },
        "attendees": {
          "type": "number",
          "description": "The number of attendees (including the guest) for the invitation."
        }
      },
      "required": [
        "id",
        "name",
        "attendees"
      ]
    },
    "SongSuggestion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SongSuggestion",
      "type": "object",
      "description": "Represents a song suggestion made by a guest for the graduation party.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the song suggestion."
        },
        "guestId": {
          "type": "string",
          "description": "Reference to Guest. (Relationship: Guest 1:N SongSuggestion)"
        },
        "spotifyTrackId": {
          "type": "string",
          "description": "The Spotify track ID of the suggested song."
        }
      },
      "required": [
        "id",
        "guestId",
        "spotifyTrackId"
      ]
    },
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents the Graduation Event details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the graduation event."
        },
        "eventName": {
          "type": "string",
          "description": "The Name of the Event."
        },
        "eventDate": {
          "type": "string",
          "description": "The Date of the Event",
          "format": "date-time"
        },
        "eventLocation": {
          "type": "string",
          "description": "The location of the event."
        }
      },
      "required": [
        "id",
        "eventName",
        "eventDate",
        "eventLocation"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Stores graduation event details.",
          "params": [
            {
              "name": "eventId",
              "description": "Unique identifier for the graduation event."
            }
          ]
        }
      },
      {
        "path": "/guests/{guestId}",
        "definition": {
          "entityName": "Guest",
          "schema": {
            "$ref": "#/backend/entities/Guest"
          },
          "description": "Stores guest information and RSVP details.",
          "params": [
            {
              "name": "guestId",
              "description": "Unique identifier for the guest."
            }
          ]
        }
      },
      {
        "path": "/guests/{guestId}/song_suggestions/{suggestionId}",
        "definition": {
          "entityName": "SongSuggestion",
          "schema": {
            "$ref": "#/backend/entities/SongSuggestion"
          },
          "description": "Stores song suggestions made by each guest.  Nesting the song suggestions under the guest to ensure authorization independence.",
          "params": [
            {
              "name": "guestId",
              "description": "Unique identifier for the guest."
            },
            {
              "name": "suggestionId",
              "description": "Unique identifier for the song suggestion."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage event details, guest information, and song suggestions for Gabriela's Graduation Gala. It emphasizes authorization independence and supports the core features of the application.  The key collections are 'events', 'guests', and 'song_suggestions'. The structure supports storing images in Firebase Storage. The design avoids hierarchical authorization dependencies by ensuring that authorization-relevant data is denormalized where necessary.  The primary method of maintaining Authorization Independence is to nest SongSuggestions under Guests, making ownership clear. The event details are stored at the top level for easy access. The guests, along with their RSVP information (attendees), are stored separately, and their song suggestions are nested under their respective documents."
  }
}