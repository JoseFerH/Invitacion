/**
 * @fileoverview Firestore Security Rules for Gabriela's Graduation Gala application.
 *
 * Core Philosophy:
 * This ruleset provides basic protection against unauthorized access to events,
 * guests, and song suggestions. It assumes a public read model with owner-only
 * writes, but enforces ownership checks only where they can be implemented with
 * the current data model. Data shape validation is omitted to allow for rapid
 * prototyping.
 *
 * Data Structure:
 * - /events/{eventId}: Stores event details. Publicly readable.
 * - /guests/{guestId}: Stores guest information. Publicly readable.
 * - /guests/{guestId}/song_suggestions/{suggestionId}: Stores song suggestions, nested under guests.
 *
 * Key Security Decisions:
 * - Public read access is enabled for all collections to simplify prototyping.
 * - Owner-only write access is attempted where the schema contains an explicit
 *   ownership field.  Where ownership is implied by the path, this is enforced.
 * - Data validation is minimal, focusing only on fields critical for authorization
 *   (e.g., creatorId, ownerId) or relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to event documents, but restricts creation, updates, and deletion to owners.
     * @path /events/{eventId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (schema does not support secure implementation).
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to guest documents, but restricts creation, updates, and deletion to owners.
     * @path /guests/{guestId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Public read, owner-only writes (schema does not support secure implementation).
     */
    match /guests/{guestId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.

      /**
       * @description Allows the owner of a guest to manage their song suggestions.
       * @path /guests/{guestId}/song_suggestions/{suggestionId}
       * @allow get, list: if true;
       * @allow create: if request.auth.uid != null;
       * @allow update: if request.auth.uid != null;
       * @allow delete: if request.auth.uid != null;
       * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
       */
      match /song_suggestions/{suggestionId} {
        allow get, list: if true;
        allow create: if request.auth.uid != null;
        allow update: if request.auth.uid != null;
        allow delete: if request.auth.uid != null;
      }
    }
  }
}